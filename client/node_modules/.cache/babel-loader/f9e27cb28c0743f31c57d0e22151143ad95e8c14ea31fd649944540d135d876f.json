{"ast":null,"code":"import React from'react';import{useState}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";export default function SingleGrid(_ref){let{cell_value,matrix,turn,socket,room_id,rowind,colind,myTurn,setMyTurn,isRoomFull}=_ref;const[isClicked,setClick]=useState(cell_value!==\"\");function handleClick(){if(!isClicked&&myTurn&&isRoomFull){console.log(\"turn : \",turn,\"row inx : \",colind);const newMatrix=matrix.map((row,rowInd)=>row.map((cell,cellInd)=>rowInd===rowind&&colind===cellInd?turn:cell));// passing new matrix to server \nconsole.log(\"matrix : \",newMatrix);socket.emit('new_matrix',newMatrix,room_id);setMyTurn(false);socket.emit('update_move',room_id);setClick(true);}}return/*#__PURE__*/_jsx(\"div\",{className:\" \".concat(isClicked?'bg-slate-300':'cursor-pointer bg-white',\" rounded-lg size-20 flex items-center justify-center \"),onClick:()=>handleClick(),children:/*#__PURE__*/_jsx(\"span\",{className:\"text-5xl text-slate-500\",children:cell_value})});}","map":{"version":3,"names":["React","useState","jsx","_jsx","SingleGrid","_ref","cell_value","matrix","turn","socket","room_id","rowind","colind","myTurn","setMyTurn","isRoomFull","isClicked","setClick","handleClick","console","log","newMatrix","map","row","rowInd","cell","cellInd","emit","className","concat","onClick","children"],"sources":["B:/React App/pulling tic-tac-toe multiplayer from github/Tic-Tac-Toe-Multiplayer/client/src/SingleGrid.js"],"sourcesContent":["import React from 'react'\nimport { useState } from 'react'\n\nexport default function SingleGrid({cell_value,matrix,turn,socket,room_id,rowind,colind,myTurn,setMyTurn,isRoomFull}) {\n    const [isClicked,setClick] = useState((cell_value !== \"\"))\n\n    function handleClick(){\n        if((!isClicked) && (myTurn) && (isRoomFull)){          \n          console.log(\"turn : \",turn,\"row inx : \",colind);\n          const newMatrix = matrix.map((row,rowInd)=>(\n            row.map((cell,cellInd) => (((rowInd === rowind) && (colind === cellInd)) ? turn : cell )\n              )\n          ));\n          // passing new matrix to server \n          console.log(\"matrix : \",newMatrix)\n          socket.emit('new_matrix',newMatrix,room_id);\n          setMyTurn(false);\n          socket.emit('update_move',room_id);\n\n          setClick(true);  \n        }\n     \n    }\n  return (\n    <div className={` ${isClicked ? 'bg-slate-300' :'cursor-pointer bg-white'} rounded-lg size-20 flex items-center justify-center `} \n    onClick={()=> handleClick()}>\n        \n        <span className=\"text-5xl text-slate-500\">{cell_value}</span> \n\n    </div>\n  )\n}\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CACzB,OAASC,QAAQ,KAAQ,OAAO,QAAAC,GAAA,IAAAC,IAAA,yBAEhC,cAAe,SAAS,CAAAC,UAAUA,CAAAC,IAAA,CAAoF,IAAnF,CAACC,UAAU,CAACC,MAAM,CAACC,IAAI,CAACC,MAAM,CAACC,OAAO,CAACC,MAAM,CAACC,MAAM,CAACC,MAAM,CAACC,SAAS,CAACC,UAAU,CAAC,CAAAV,IAAA,CAChH,KAAM,CAACW,SAAS,CAACC,QAAQ,CAAC,CAAGhB,QAAQ,CAAEK,UAAU,GAAK,EAAG,CAAC,CAE1D,QAAS,CAAAY,WAAWA,CAAA,CAAE,CAClB,GAAI,CAACF,SAAS,EAAMH,MAAO,EAAKE,UAAW,CAAC,CAC1CI,OAAO,CAACC,GAAG,CAAC,SAAS,CAACZ,IAAI,CAAC,YAAY,CAACI,MAAM,CAAC,CAC/C,KAAM,CAAAS,SAAS,CAAGd,MAAM,CAACe,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,GACtCD,GAAG,CAACD,GAAG,CAAC,CAACG,IAAI,CAACC,OAAO,GAAQF,MAAM,GAAKb,MAAM,EAAMC,MAAM,GAAKc,OAAQ,CAAIlB,IAAI,CAAGiB,IAChF,CACH,CAAC,CACF;AACAN,OAAO,CAACC,GAAG,CAAC,WAAW,CAACC,SAAS,CAAC,CAClCZ,MAAM,CAACkB,IAAI,CAAC,YAAY,CAACN,SAAS,CAACX,OAAO,CAAC,CAC3CI,SAAS,CAAC,KAAK,CAAC,CAChBL,MAAM,CAACkB,IAAI,CAAC,aAAa,CAACjB,OAAO,CAAC,CAElCO,QAAQ,CAAC,IAAI,CAAC,CAChB,CAEJ,CACF,mBACEd,IAAA,QAAKyB,SAAS,KAAAC,MAAA,CAAMb,SAAS,CAAG,cAAc,CAAE,yBAAyB,yDAAwD,CACjIc,OAAO,CAAEA,CAAA,GAAKZ,WAAW,CAAC,CAAE,CAAAa,QAAA,cAExB5B,IAAA,SAAMyB,SAAS,CAAC,yBAAyB,CAAAG,QAAA,CAAEzB,UAAU,CAAO,CAAC,CAE5D,CAAC,CAEV","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}